version: '3.4'

networks:
  utility-services:
    external: true

services:
  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:0.2.0
    container_name: dockerproxy
    ports:
      - 2375:2375
    environment:
      - CONTAINERS=1
      - POST=0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - utility-services

#internet speed test service
  speedtest-tracker:
    image: ghcr.io/alexjustesen/speedtest-tracker:v0.13.4
    container_name: speedtest-tracker
    ports:
      - 8081:80
      - 8443:443
    environment:
      - PUID=1000
      - PGID=1000
      - DB_CONNECTION=sqlite
      - DB_HOST=/config/database.sqlite
    volumes:
      - ${VOLUMES_PATH}/utility-services/speedtest/config:/config
    restart: unless-stopped
    networks:
      - utility-services
      
#  SSD/HDD health check service
  scrutiny:
    image: ghcr.io/analogj/scrutiny:v0.8.1-omnibus
    container_name: scrutiny
    ports:
      - 8082:8080
      - 8086:8086
    environment:
      - TZ=${TIMEZONE}
      - COLLECTOR_CRON_SCHEDULE="0 * * * *"
    volumes:
      - /run/udev:/run/udev:ro
      - ${VOLUMES_PATH}/utility-services/scrutiny/config:/opt/scrutiny/config
      - ${VOLUMES_PATH}/utility-services/scrutiny/influxdb:/opt/scrutiny/influxdb
    cap_add:
      - SYS_RAWIO
    privileged: true
    restart: unless-stopped
    networks:
      - utility-services
    healthcheck:
      test: curl --connect-timeout 15 --silent --show-error --fail http://localhost:8080/api/health | grep -q 'true'
      interval: 60s
      retries: 5
      timeout: 10s
      start_period: 20s

# file browser for the server
  filebrowser:
    image: filebrowser/filebrowser:v2-s6
    container_name: filebrowser
    ports:
      - 8300:80
    environment:
      - PUID=0
      - PGID=0
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/utility-services/filebrowser/database:/database
      - ${VOLUMES_PATH}/utility-services/filebrowser/config:/config
      - /:/srv
    restart: unless-stopped
    networks:
      - utility-services

# file sharing service
  pairdrop:
    image: linuxserver/pairdrop:1.10.9
    container_name: pairdrop 
    ports:
      - 3000:3000
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=S<TIMEZONE)
      - RATE_LIMIT=false
      - WS_FALLBACK=false
      - DEBUG_MODE=false 
    restart: unless-stopped 
    networks:
      - utility-services
# movie converter from x264 to x265 service
  tdarr:
    image: ghcr.io/haveagitgat/tdarr:2.23.01
    container_name: tdarr
    ports:
      - 8265:8265 # webUI port
      - 8266:8266 # server port
    environment:
      - TZ=${TIMEZONE}
      - PUID=1000
      - PGID=1000
      - serverIP=${SERVER_IP}
      - serverPort=8266
      - webUIPort=8265
    restart: unless-stopped
    volumes:
      - ${VOLUMES_PATH}/utility-services/tdarr/server:/app/server
      - ${VOLUMES_PATH}/utility-services/tdarr/configs:/app/configs
      - ${VOLUMES_PATH}/utility-services/tdarr/logs:/app/logs
      - ${MEDIA_HDD_PATH}/data:/media
      - ${MEDIA_HDD_PATH}/data/tdarr_cache:/temp
    networks:
      - utility-services
  # node for movie converter service Tdarr. Important!
  tdarr-node:
    image: ghcr.io/haveagitgat/tdarr_node:2.23.01
    container_name: tdarr-node
    network_mode: service:tdarr
    environment:
      - TZ=${TIMEZONE}
      - UMASK_SET=002
      - nodeName=MyExternalNode
      - nodeID=MainNode
      - serverIP=${SERVER_IP}
      - serverPort=8266
    restart: unless-stopped
    volumes:
      - ${VOLUMES_PATH}/utility-services/tdarr_node/configs:/app/configs
      - ${VOLUMES_PATH}/utility-services/tdarr_node/logs:/app/logs
      - ${MEDIA_HDD_PATH}/data:/media
      - ${MEDIA_HDD_PATH}/data/tdarr_cache:/temp
    devices:
      - /dev/dri:/dev/dri


